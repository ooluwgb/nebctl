#!/usr/bin/env python3

import subprocess
import sys
from pathlib import Path

USAGE = """\
Usage: nebctl update

Description:
  Pulls the latest updates from the main branch of the nebctl repository,
  force-overwriting local changes if needed, and reruns the installer script.
"""

REPO_URL = "git@github.com:Automatare/nebctl.git"
INSTALL_DIR = Path.home() / ".nebctl"

def run(cmd, cwd=None, check=True):
    return subprocess.run(cmd, cwd=cwd, check=check)

def main():
    if len(sys.argv) != 1:
        print(USAGE)
        sys.exit(1)

    try:
        repo_root = INSTALL_DIR.resolve()
        print(f"üìç Using install directory: {repo_root}")

        if not repo_root.exists():
            print(f"‚ùå Install directory {repo_root} does not exist!", file=sys.stderr)
            sys.exit(1)

        # Initialize Git if needed
        if not (repo_root / ".git").exists():
            print("üîß Initializing git repository...")
            run(["git", "init"], cwd=repo_root)

        # Set origin if not set
        result = subprocess.run(["git", "remote", "get-url", "origin"],
                                cwd=repo_root,
                                stdout=subprocess.DEVNULL,
                                stderr=subprocess.DEVNULL)
        if result.returncode != 0:
            print(f"üîó Setting remote origin to {REPO_URL}...")
            run(["git", "remote", "add", "origin", REPO_URL], cwd=repo_root)
        else:
            print("‚úÖ Remote origin already set.")

        # Fetch and hard reset to main
        print("üì• Fetching and resetting to latest main...")
        run(["git", "fetch", "origin"], cwd=repo_root)
        run(["git", "reset", "--hard", "origin/main"], cwd=repo_root)

        # Run install script
        install_script = repo_root / "install"
        if not install_script.exists():
            print("‚ùå install script not found!", file=sys.stderr)
            sys.exit(1)

        print("üöÄ Running installer...")
        run([str(install_script)], cwd=repo_root)

        print("‚úÖ Update completed successfully.")

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error during update: {e}", file=sys.stderr)
        sys.exit(e.returncode)

if __name__ == "__main__":
    main()
